{"ast":null,"code":"var _jsxFileName = \"/home/harry/project_thea/src/components/sensor.js\";\nimport React from \"react\";\nimport { Marker } from \"react-map-gl\";\nimport { sensor_data, detection_data } from \"../fake_data/fake_data\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { DeleteSensorButton } from \"./buttons\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CameraCard from \"./cameraCard\";\nimport NoDataCard from \"./noDataCard\";\nimport Pin from \"./map/Pin\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nclass SensorIcon extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleDragEnd = event => {\n      this.props.handleMarkerDragEnd(event.lngLat, this.props.sensor.id);\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          sensor = _this$props.sensor,\n          index = _this$props.index,\n          onClick = _this$props.onClick;\n    return React.createElement(Marker, {\n      key: `marker-${index}`,\n      draggable: true,\n      onDragEnd: this.handleDragEnd.bind(this),\n      longitude: sensor.longitude,\n      latitude: sensor.latitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: () => onClick(sensor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Pin, {\n      size: 50,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })));\n  }\n\n} // The card right at the top of each sensor panel, with a title and close button.\n\n\nclass TitleCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props2 = this.props,\n          sensor_name = _this$props2.sensor_name,\n          remove_tab_cb = _this$props2.remove_tab_cb,\n          tab_id = _this$props2.tab_id; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: () => remove_tab_cb(tab_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      style: {\n        marginTop: \"6px\",\n        marginLeft: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, sensor.name));\n  }\n\n} // The card just below the title with basic sensor information.\n\n\nclass InfoCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const sensor_name = this.props.sensor_name; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        paddingTop: \"0px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        backgroundColor: \"#EEEEEE\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Camera Trap Details\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Name:\"), \" \", sensor.name), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Created:\"), \" \", sensor.created)));\n  }\n\n} // The card below the information, with summary of data.\n\n\nclass DataCard extends React.Component {\n  render() {\n    // Find the sensor with the right name.\n    const sensor = sensor_data.filter(sensor => sensor.name === this.props.sensor_name)[0]; // Get detection data for that sensor.\n\n    const data = detection_data.filter(data => data.sensor_id === sensor.id)[0]; // Decide which card to show based on the detection data type.\n\n    let card = React.createElement(NoDataCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n\n    if (data.type === 'camera') {\n      card = React.createElement(CameraCard, {\n        information: data.info,\n        data: data.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    } // Simply render the appropriate card component.\n\n\n    return card;\n  }\n\n} // The bit below the data in the sensor panel with options to delete and move sensors.\n\n\nclass ControlCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props3 = this.props,\n          sensor_name = _this$props3.sensor_name,\n          callbackRemoveSensor = _this$props3.callbackRemoveSensor,\n          tab_id = _this$props3.tab_id; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        paddingTop: \"0px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        backgroundColor: \"#EEEEEE\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Control\")), React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(DeleteSensorButton, {\n      sensorID: sensor.id,\n      callbackRemoveSensor: callbackRemoveSensor,\n      tab_id: tab_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))));\n  }\n\n} // This is the little pop up you get when clicking the icon on the map.\n\n\nclass SensorBite extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props4 = this.props,\n          info = _this$props4.info,\n          add_tab_cb = _this$props4.add_tab_cb;\n    return React.createElement(\"div\", {\n      style: {\n        paddingTop: \"15px\",\n        textAlign: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, `${info.name}`)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => add_tab_cb(info.name),\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"More Details\"))));\n  }\n\n} // This is the card that appears in the \"Sensor Tab\" that lists all sensors. Think a menu to go to your sensors directly.\n\n\nclass SensorSummaryCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props5 = this.props,\n          sensor_name = _this$props5.sensor_name,\n          add_tab_cb = _this$props5.add_tab_cb; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        paddingTop: '20px',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: '100%',\n        backgroundColor: '#EEEEEE'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h5\",\n      component: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, sensor.name), React.createElement(Typography, {\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, sensor.type)), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      onClick: () => add_tab_cb(sensor.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Details\"))));\n  }\n\n}\n\nexport { SensorBite, SensorIcon, InfoCard, TitleCard, DataCard, ControlCard, SensorSummaryCard };","map":{"version":3,"sources":["/home/harry/project_thea/src/components/sensor.js"],"names":["React","Marker","sensor_data","detection_data","Tooltip","DeleteSensorButton","CloseIcon","CameraCard","NoDataCard","Pin","IconButton","Card","Button","CardActions","CardContent","Typography","SensorIcon","Component","handleDragEnd","event","props","handleMarkerDragEnd","lngLat","sensor","id","render","index","onClick","bind","longitude","latitude","cursor","TitleCard","sensor_name","remove_tab_cb","tab_id","filter","name","padding","display","marginTop","marginLeft","InfoCard","paddingTop","backgroundColor","flexDirection","alignItems","created","DataCard","data","sensor_id","card","type","info","ControlCard","callbackRemoveSensor","SensorBite","add_tab_cb","textAlign","SensorSummaryCard","width"],"mappings":"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","sourcesContent":["import React  from \"react\";\nimport {Marker} from \"react-map-gl\";\nimport { sensor_data, detection_data } from \"../fake_data/fake_data\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { DeleteSensorButton } from \"./buttons\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CameraCard from \"./cameraCard\";\nimport NoDataCard from \"./noDataCard\";\nimport Pin from \"./map/Pin\"\n\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nclass SensorIcon extends React.Component {\n\n    handleDragEnd = event => {\n\n        this.props.handleMarkerDragEnd(event.lngLat, this.props.sensor.id);\n    };\n\n    render() {\n\n        const {sensor, index, onClick} = this.props;\n\n        return (\n            <Marker\n                key={`marker-${index}`}\n                draggable\n                onDragEnd={this.handleDragEnd.bind(this)}\n                longitude={sensor.longitude}\n                latitude={sensor.latitude}\n            >\n                <div style={{cursor: 'pointer'}} onClick={() => onClick(sensor)}>\n                    <Pin size={50} />\n                </div>\n            </Marker>\n        );\n    }\n}\n\n// The card right at the top of each sensor panel, with a title and close button.\nclass TitleCard extends React.Component {\n\n    render() {\n        // Deconstruct props.\n        const { sensor_name, remove_tab_cb, tab_id } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{padding: \"20px\", display: \"flex\"}}>\n                <Tooltip title=\"Close\">\n                    <IconButton onClick={() => remove_tab_cb(tab_id)}>\n                        <CloseIcon></CloseIcon>\n                    </IconButton>\n                </Tooltip>\n                <h3 style={{marginTop:\"6px\", marginLeft:\"10px\"}}>{sensor.name}</h3>\n            </div>\n        );\n    }\n}\n\n// The card just below the title with basic sensor information.\nclass InfoCard extends React.Component {\n\n    render() {\n        // Deconstruct props.\n        const { sensor_name } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{padding: \"20px\", paddingTop: \"0px\"}}>\n                <div style={{padding: \"20px\", backgroundColor:\"#EEEEEE\", display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\"}}>\n                    <div><h4>Camera Trap Details</h4></div>\n                    <div><b>Name:</b> {sensor.name}</div>\n                    <div><b>Created:</b> {sensor.created}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// The card below the information, with summary of data.\nclass DataCard extends React.Component {\n\n    render() {\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === this.props.sensor_name)[0];\n\n        // Get detection data for that sensor.\n        const data = detection_data.filter(data => data.sensor_id === sensor.id)[0];\n\n        // Decide which card to show based on the detection data type.\n        let card = <NoDataCard/>;\n        if (data.type === 'camera') {\n            card = <CameraCard\n                information={data.info}\n                data={data.data}\n            />\n        }\n\n        // Simply render the appropriate card component.\n        return ( card );\n    }\n}\n\n// The bit below the data in the sensor panel with options to delete and move sensors.\nclass ControlCard extends React.Component {\n\n    render() {\n        // Deconstruct props.\n        const { sensor_name, callbackRemoveSensor, tab_id } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{padding: \"20px\", paddingTop: \"0px\"}}>\n                <div style={{padding: \"20px\", backgroundColor:\"#EEEEEE\", display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\"}}>\n                    <div><h4>Control</h4></div>\n                    <div style={{display: 'flex'}}>\n                        <DeleteSensorButton\n                            sensorID={sensor.id}\n                            callbackRemoveSensor={callbackRemoveSensor}\n                            tab_id={tab_id}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// This is the little pop up you get when clicking the icon on the map.\nclass SensorBite extends React.Component {\n  render() {\n\n      // Deconstruct props.\n      const {info, add_tab_cb} = this.props;\n\n      return (\n          <div style={{paddingTop: \"15px\", textAlign: \"left\"}}>\n              <div><b>{`${info.name}`}</b></div>\n              <div>\n                  <div onClick={() => add_tab_cb(info.name)} style={{cursor: 'pointer'}}><u>More Details</u></div>\n              </div>\n          </div>\n      );\n  }\n}\n\n// This is the card that appears in the \"Sensor Tab\" that lists all sensors. Think a menu to go to your sensors directly.\nclass SensorSummaryCard extends React.Component {\n    render() {\n\n        // Deconstruct props.\n        const { sensor_name, add_tab_cb } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{paddingTop: '20px', width: '100%'}}>\n                <Card style={{width: '100%', backgroundColor: '#EEEEEE'}}>\n                  <CardContent style={{display: 'flex', flexDirection: 'column', alignItems: 'flex-start'}}>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {sensor.name}\n                    </Typography>\n                    <Typography color=\"textSecondary\">\n                        {sensor.type}\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" onClick={() => add_tab_cb(sensor.name)}>Details</Button>\n                  </CardActions>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport { SensorBite, SensorIcon, InfoCard, TitleCard, DataCard, ControlCard, SensorSummaryCard };"]},"metadata":{},"sourceType":"module"}