{"ast":null,"code":"var _jsxFileName = \"/home/harry/project_thea/src/components/sensor.js\";\nimport React, { PureComponent } from \"react\";\nimport { Marker } from \"react-map-gl\";\nimport { sensor_data, detection_data } from \"../fake_data/fake_data\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { DeleteSensorButton } from \"./buttons\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CameraCard from \"./cameraCard\";\nimport NoDataCard from \"./noDataCard\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography'; // Some global settings.\n\nconst ICON_SIZE = 80;\n\nclass SensorIcon extends React.Component {\n  get_pin(sensor, onClick) {\n    if (this.props.sensor.drag === true) {\n      return React.createElement(Pin, {\n        size: 50,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        style: {\n          cursor: 'pointer'\n        },\n        onClick: () => onClick(sensor),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: sensor.icon,\n        alt: \"sensor_icon\",\n        style: {\n          width: `${ICON_SIZE}px`,\n          transform: `translate(${-ICON_SIZE / 2}px,${-ICON_SIZE}px)`\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          sensor = _this$props.sensor,\n          index = _this$props.index,\n          onClick = _this$props.onClick,\n          onMarkerDragEnd = _this$props.onMarkerDragEnd;\n    return React.createElement(Marker, {\n      key: `marker-${index}`,\n      draggable: true,\n      onDragEnd: onMarkerDragEnd,\n      longitude: sensor.longitude,\n      latitude: sensor.latitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: () => onClick(sensor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Pin, {\n      size: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass InfoCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const sensor_name = this.props.sensor_name; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        paddingTop: \"0px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        backgroundColor: \"#EEEEEE\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Basic Sensor Details\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Name:\"), \" \", sensor.name), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Sensor Type:\"), \" \", sensor.type), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Created:\"), \" \", sensor.created), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Data Update Frequency:\"), \" \", sensor.frequency), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Sensor Security:\"), \" \", sensor.access), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Data Provenance:\"), \" \", sensor.provenance)));\n  }\n\n}\n\nclass TitleCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props2 = this.props,\n          sensor_name = _this$props2.sensor_name,\n          remove_tab_cb = _this$props2.remove_tab_cb,\n          tab_id = _this$props2.tab_id; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: () => remove_tab_cb(tab_id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      style: {\n        marginTop: \"6px\",\n        marginLeft: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, sensor.name));\n  }\n\n}\n\nclass DataCard extends React.Component {\n  render() {\n    // Find the sensor with the right name.\n    const sensor = sensor_data.filter(sensor => sensor.name === this.props.sensor_name)[0]; // Get detection data for that sensor.\n\n    const data = detection_data.filter(data => data.sensor_id === sensor.id)[0]; // Decide which card to show based on the detection data type.\n\n    let card = React.createElement(NoDataCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    });\n\n    if (data.type === 'camera') {\n      card = React.createElement(CameraCard, {\n        information: data.info,\n        data: data.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    } // Simply render the appropriate card component.\n\n\n    return card;\n  }\n\n}\n\nclass ControlCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props3 = this.props,\n          sensor_name = _this$props3.sensor_name,\n          callbackRemoveSensor = _this$props3.callbackRemoveSensor,\n          tab_id = _this$props3.tab_id; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        paddingTop: \"0px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"20px\",\n        backgroundColor: \"#EEEEEE\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Control\")), React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(DeleteSensorButton, {\n      sensorID: sensor.id,\n      callbackRemoveSensor: callbackRemoveSensor,\n      tab_id: tab_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nclass SensorBite extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props4 = this.props,\n          info = _this$props4.info,\n          add_tab_cb = _this$props4.add_tab_cb;\n    return React.createElement(\"div\", {\n      style: {\n        paddingTop: \"15px\",\n        textAlign: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, `${info.name}`)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, `Type: ${info.type}`), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Health: \", React.createElement(\"b\", {\n      style: {\n        color: '#55BB55'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, info.health)), React.createElement(\"div\", {\n      onClick: () => add_tab_cb(info.name),\n      style: {\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"More Details\"))));\n  }\n\n}\n\nclass SensorSummaryCard extends React.Component {\n  render() {\n    // Deconstruct props.\n    const _this$props5 = this.props,\n          sensor_name = _this$props5.sensor_name,\n          add_tab_cb = _this$props5.add_tab_cb; // Find the sensor with the right name.\n\n    const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n    return React.createElement(\"div\", {\n      style: {\n        paddingTop: '20px',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: '100%',\n        backgroundColor: '#EEEEEE'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h5\",\n      component: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, sensor.name), React.createElement(Typography, {\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, sensor.type)), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      onClick: () => add_tab_cb(sensor.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Details\"))));\n  }\n\n}\n\nexport { SensorBite, SensorIcon, InfoCard, TitleCard, DataCard, ControlCard, SensorSummaryCard };","map":{"version":3,"sources":["/home/harry/project_thea/src/components/sensor.js"],"names":["React","PureComponent","Marker","sensor_data","detection_data","Tooltip","DeleteSensorButton","CloseIcon","CameraCard","NoDataCard","IconButton","Card","Button","CardActions","CardContent","Typography","ICON_SIZE","SensorIcon","Component","get_pin","sensor","onClick","props","drag","cursor","icon","width","transform","render","index","onMarkerDragEnd","longitude","latitude","InfoCard","sensor_name","filter","name","padding","paddingTop","backgroundColor","display","flexDirection","alignItems","type","created","frequency","access","provenance","TitleCard","remove_tab_cb","tab_id","marginTop","marginLeft","DataCard","data","sensor_id","id","card","info","ControlCard","callbackRemoveSensor","SensorBite","add_tab_cb","textAlign","color","health","SensorSummaryCard"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport {Marker} from \"react-map-gl\";\nimport { sensor_data, detection_data } from \"../fake_data/fake_data\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { DeleteSensorButton } from \"./buttons\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CameraCard from \"./cameraCard\";\nimport NoDataCard from \"./noDataCard\";\n\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\n// Some global settings.\nconst ICON_SIZE = 80;\n\n\nclass SensorIcon extends React.Component {\n\n    get_pin (sensor, onClick) {\n        if (this.props.sensor.drag === true) {\n            return (\n                <Pin size={50} />\n            )\n        }\n        else {\n            return (\n                <div style={{cursor: 'pointer'}} onClick={() => onClick(sensor)}>\n                    <img src={sensor.icon} alt=\"sensor_icon\"\n                         style={{\n                             width: `${ICON_SIZE}px`,\n                             transform: `translate(${-ICON_SIZE / 2}px,${-ICON_SIZE}px)`}}\n                    />\n                </div>\n            )\n        }\n    }\n\n    render() {\n\n        const {sensor, index, onClick, onMarkerDragEnd} = this.props;\n\n        return (\n            <Marker\n                key={`marker-${index}`}\n                draggable\n                onDragEnd={onMarkerDragEnd}\n                longitude={sensor.longitude}\n                latitude={sensor.latitude}\n            >\n                <div style={{cursor: 'pointer'}} onClick={() => onClick(sensor)}>\n                    <Pin size={20} />\n                </div>\n            </Marker>\n        );\n    }\n}\n\nclass InfoCard extends React.Component {\n\n    render() {\n        // Deconstruct props.\n        const { sensor_name } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{padding: \"20px\", paddingTop: \"0px\"}}>\n                <div style={{padding: \"20px\", backgroundColor:\"#EEEEEE\", display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\"}}>\n                    <div><h4>Basic Sensor Details</h4></div>\n                    <div><b>Name:</b> {sensor.name}</div>\n                    <div><b>Sensor Type:</b> {sensor.type}</div>\n                    <div><b>Created:</b> {sensor.created}</div>\n                    <div><b>Data Update Frequency:</b> {sensor.frequency}</div>\n                    <div><b>Sensor Security:</b> {sensor.access}</div>\n                    <div><b>Data Provenance:</b> {sensor.provenance}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass TitleCard extends React.Component {\n\n    render() {\n        // Deconstruct props.\n        const { sensor_name, remove_tab_cb, tab_id } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{padding: \"20px\", display: \"flex\"}}>\n                <Tooltip title=\"Close\">\n                    <IconButton onClick={() => remove_tab_cb(tab_id)}>\n                        <CloseIcon></CloseIcon>\n                    </IconButton>\n                </Tooltip>\n                <h3 style={{marginTop:\"6px\", marginLeft:\"10px\"}}>{sensor.name}</h3>\n            </div>\n        );\n    }\n}\n\nclass DataCard extends React.Component {\n\n    render() {\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === this.props.sensor_name)[0];\n\n        // Get detection data for that sensor.\n        const data = detection_data.filter(data => data.sensor_id === sensor.id)[0];\n\n        // Decide which card to show based on the detection data type.\n        let card = <NoDataCard/>;\n        if (data.type === 'camera') {\n            card = <CameraCard\n                information={data.info}\n                data={data.data}\n            />\n        }\n\n        // Simply render the appropriate card component.\n        return ( card );\n    }\n}\n\nclass ControlCard extends React.Component {\n\n    render() {\n        // Deconstruct props.\n        const { sensor_name, callbackRemoveSensor, tab_id } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{padding: \"20px\", paddingTop: \"0px\"}}>\n                <div style={{padding: \"20px\", backgroundColor:\"#EEEEEE\", display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\"}}>\n                    <div><h4>Control</h4></div>\n                    <div style={{display: 'flex'}}>\n                        <DeleteSensorButton\n                            sensorID={sensor.id}\n                            callbackRemoveSensor={callbackRemoveSensor}\n                            tab_id={tab_id}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass SensorBite extends React.Component {\n  render() {\n\n      // Deconstruct props.\n      const {info, add_tab_cb} = this.props;\n\n      return (\n          <div style={{paddingTop: \"15px\", textAlign: \"left\"}}>\n              <div><b>{`${info.name}`}</b></div>\n              <div>\n                  <div>{`Type: ${info.type}`}</div>\n                  <div>Health: <b style={{color: '#55BB55'}}>{info.health}</b></div>\n                  <div onClick={() => add_tab_cb(info.name)} style={{cursor: 'pointer'}}><u>More Details</u></div>\n              </div>\n          </div>\n      );\n  }\n}\n\nclass SensorSummaryCard extends React.Component {\n    render() {\n\n        // Deconstruct props.\n        const { sensor_name, add_tab_cb } = this.props;\n\n        // Find the sensor with the right name.\n        const sensor = sensor_data.filter(sensor => sensor.name === sensor_name)[0];\n\n        return (\n            <div style={{paddingTop: '20px', width: '100%'}}>\n                <Card style={{width: '100%', backgroundColor: '#EEEEEE'}}>\n                  <CardContent style={{display: 'flex', flexDirection: 'column', alignItems: 'flex-start'}}>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {sensor.name}\n                    </Typography>\n                    <Typography color=\"textSecondary\">\n                        {sensor.type}\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" onClick={() => add_tab_cb(sensor.name)}>Details</Button>\n                  </CardActions>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport { SensorBite, SensorIcon, InfoCard, TitleCard, DataCard, ControlCard, SensorSummaryCard };"]},"metadata":{},"sourceType":"module"}