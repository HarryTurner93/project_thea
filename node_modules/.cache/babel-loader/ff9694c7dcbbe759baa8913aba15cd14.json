{"ast":null,"code":"var _jsxFileName = \"/home/harry/project_thea/src/components/dashboard.js\";\nimport React from \"react\";\nimport { Map } from \"./map\";\nimport { TabBrowser } from \"./tabBrowser\";\nimport { sensor_data, alert_data } from \"../fake_data/fake_data\";\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tabs: [],\n      current_tab_key: \"sensors\",\n      sensors: Array.from(sensor_data),\n      alerts: Array.from(alert_data)\n    }; // Bind all handler functions.\n\n    this.callbackRemoveSensor = this.callbackRemoveSensor.bind(this);\n    this.cb_remove_alert = this.cb_remove_alert.bind(this);\n    this.removeTab = this.removeTab.bind(this);\n    this.addTab = this.addTab.bind(this);\n    this.setTab = this.setTab.bind(this); // Create References.\n\n    this.mapRef = React.createRef();\n  } // Call back function to remove a sensor.\n\n\n  callbackRemoveSensor(sensor_id, tab_id) {\n    // Clear pop ups on the map.\n    this.mapRef.current.clearPopUp(); // Now remove the tab from the browser.\n\n    this.removeTab(tab_id); // Now remove the sensor from the state.\n\n    this.setState(state => {\n      const new_sensors = state.sensors.filter(sensor => sensor.id !== sensor_id);\n      return {\n        sensors: new_sensors\n      };\n    });\n  } // Call back function to remove an alert.\n\n\n  cb_remove_alert(alert_id) {\n    // Remove the alert from the state.\n    this.setState(state => {\n      const new_alerts = state.alerts.filter(alert => alert.id !== alert_id);\n      return {\n        alerts: new_alerts\n      };\n    });\n  } // Call back function to remove a tab from the browser.\n\n\n  removeTab(id) {\n    this.setState(state => {\n      const new_tabs = state.tabs.filter(tab => tab.id !== id);\n      return {\n        tabs: new_tabs,\n        current_tab_key: \"dashboard\"\n      };\n    });\n  } // Call back function to add a tab to the browser.\n\n\n  addTab(eventKey) {\n    // Get tabs that already have this eventKey.\n    const existing_tabs = this.state.tabs.filter(tab => tab.eventKey === eventKey); // Add the new tab if none already exist.\n\n    if (existing_tabs.length === 0) {\n      this.setState((state, props) => ({\n        tabs: state.tabs.concat({\n          \"eventKey\": eventKey,\n          \"title\": eventKey,\n          \"id\": state.tabs.length\n        }),\n        current_tab_key: eventKey\n      }));\n    }\n  }\n\n  setTab(eventKey) {\n    this.setState({\n      current_tab_key: eventKey\n    });\n  }\n\n  render() {\n    return React.createElement(\"main\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Map, {\n      sensor_data: this.state.sensors,\n      add_tab_cb: this.addTab,\n      ref: this.mapRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(TabBrowser, {\n      sensor_data: this.state.sensors,\n      alert_data: this.state.alerts,\n      tabs: this.state.tabs,\n      add_tab_cb: this.addTab,\n      current_tab_key: this.state.current_tab_key,\n      remove_tab_cb: this.removeTab,\n      set_tab_cb: this.setTab,\n      callbackRemoveSensor: this.callbackRemoveSensor,\n      cb_remove_alert: this.cb_remove_alert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/harry/project_thea/src/components/dashboard.js"],"names":["React","Map","TabBrowser","sensor_data","alert_data","Dashboard","Component","constructor","props","state","tabs","current_tab_key","sensors","Array","from","alerts","callbackRemoveSensor","bind","cb_remove_alert","removeTab","addTab","setTab","mapRef","createRef","sensor_id","tab_id","current","clearPopUp","setState","new_sensors","filter","sensor","id","alert_id","new_alerts","alert","new_tabs","tab","eventKey","existing_tabs","length","concat","render","display","flex"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Map} from \"./map\";\nimport {TabBrowser} from \"./tabBrowser\";\nimport {sensor_data, alert_data} from \"../fake_data/fake_data\";\n\nclass Dashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabs: [],\n            current_tab_key: \"sensors\",\n            sensors: Array.from(sensor_data),\n            alerts: Array.from(alert_data)\n        };\n\n        // Bind all handler functions.\n        this.callbackRemoveSensor = this.callbackRemoveSensor.bind(this);\n        this.cb_remove_alert = this.cb_remove_alert.bind(this);\n        this.removeTab = this.removeTab.bind(this);\n        this.addTab = this.addTab.bind(this);\n        this.setTab = this.setTab.bind(this);\n\n        // Create References.\n        this.mapRef = React.createRef();\n    }\n\n    // Call back function to remove a sensor.\n    callbackRemoveSensor (sensor_id, tab_id) {\n\n        // Clear pop ups on the map.\n        this.mapRef.current.clearPopUp();\n\n        // Now remove the tab from the browser.\n        this.removeTab(tab_id);\n\n        // Now remove the sensor from the state.\n        this.setState((state) => {\n            const new_sensors = state.sensors.filter(sensor => sensor.id !== sensor_id);\n            return {sensors: new_sensors}\n        })\n    }\n\n    // Call back function to remove an alert.\n    cb_remove_alert (alert_id) {\n\n        // Remove the alert from the state.\n        this.setState((state) => {\n            const new_alerts = state.alerts.filter(alert => alert.id !== alert_id);\n            return {alerts: new_alerts}\n        })\n    }\n\n    // Call back function to remove a tab from the browser.\n    removeTab (id) {\n        this.setState((state) => {\n            const new_tabs = state.tabs.filter(tab => tab.id !== id);\n            return {tabs: new_tabs, current_tab_key: \"dashboard\"}\n        })\n    }\n\n    // Call back function to add a tab to the browser.\n    addTab (eventKey) {\n\n        // Get tabs that already have this eventKey.\n        const existing_tabs = this.state.tabs.filter(tab => tab.eventKey === eventKey);\n\n        // Add the new tab if none already exist.\n        if (existing_tabs.length === 0) {\n            this.setState((state, props) => ({\n                tabs: state.tabs.concat({\"eventKey\": eventKey, \"title\": eventKey, \"id\": state.tabs.length}),\n                current_tab_key: eventKey\n            }));\n        }\n    }\n\n    setTab(eventKey) {\n        this.setState({current_tab_key: eventKey})\n    }\n\n    render() {\n        return (\n            <main className=\"App\">\n                <div style={{display: 'flex'}}>\n                    <div style={{flex: 1}}>\n                        <Map\n                            sensor_data={this.state.sensors}\n                            add_tab_cb={this.addTab}\n                            ref={this.mapRef}\n                        />\n                    </div>\n                    <div style={{flex: 1}}>\n                        <TabBrowser\n                            sensor_data={this.state.sensors}\n                            alert_data={this.state.alerts}\n                            tabs={this.state.tabs}\n                            add_tab_cb={this.addTab}\n                            current_tab_key={this.state.current_tab_key}\n                            remove_tab_cb={this.removeTab}\n                            set_tab_cb={this.setTab}\n                            callbackRemoveSensor={this.callbackRemoveSensor}\n                            cb_remove_alert={this.cb_remove_alert}\n                        />\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}